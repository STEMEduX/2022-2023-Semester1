from cvzone.HandTrackingModule import HandDetector
import cv2

def changeFromOpenToClose(old_fingers, new_fingers):
    if old_fingers[0] == 1 and new_fingers[0]==0:
        return True
    return False

def changeFromCloseToOpen(old_fingers, new_fingers):
    if old_fingers[0] == 0 and new_fingers[0]==1:
        return True
    return False

cap = cv2.VideoCapture(0)
detector = HandDetector(detectionCon=0.8, maxHands=1)
last_fingers = [0,0,0,0,0]
hand_draw_start = False

while True:

# Get image frame
    success, img = cap.read()
# Find the hand and its landmarks
    hands, img = detector.findHands(img) # with draw
#hands = detector.findHands(img, draw=False) # without draw
    if hands:
        # Hand 1
        hand1 = hands[0]
        lmList1 = hand1["lmList"]  # List of 21 Landmark points
        bbox1 = hand1["bbox"]  # Bounding box info x,y,w,h
        centerPoint1 = hand1['center']  # center of the hand cx,cy
        handType1 = hand1["type"]  # Handtype Left or Right

        fingers1 = detector.fingersUp(hand1)

        if handType1 == 'Right' and changeFromOpenToClose(last_fingers, fingers1):
            hand_draw_start = True

        if handType1 == 'Right' and changeFromCloseToOpen(last_fingers, fingers1):
            hand_draw_start = False

        last_fingers = fingers1

        if hand_draw_start:
            (x, y, w, h) = bbox1
            cv2.rectangle(img, (x, y), (x + 2 * w, y + h), (0, 255, 0), 2)

        if len(hands) == 2:
            # Hand 2
            hand2 = hands[1]
            lmList2 = hand2["lmList"]  # List of 21 Landmark points
            bbox2 = hand2["bbox"]  # Bounding box info x,y,w,h
            centerPoint2 = hand2['center']  # center of the hand cx,cy
            handType2 = hand2["type"]  # Hand Type "Left" or "Right"

            fingers2 = detector.fingersUp(hand2)

            # Find Distance between two Landmarks. Could be same hand or different hands
            length, info, img = detector.findDistance(lmList1[8], lmList2[8], img)  # with draw
            # length, info = detector.findDistance(lmList1[8], lmList2[8])  # with draw
    # Display
    cv2.imshow("Image", img)
    if cv2.waitKey(1) == ord('q'):
        break


cap.release()
cv2.destroyAllWindows()

